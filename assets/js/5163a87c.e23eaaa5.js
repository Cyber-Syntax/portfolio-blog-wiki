"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2141],{4875:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"git/git-how-to","title":"Git Fundamentals","description":"How to get updates from main repo without losing your commits","source":"@site/dev/git/git-how-to.md","sourceDirName":"git","slug":"/git/git-how-to","permalink":"/dev/git/git-how-to","draft":false,"unlisted":false,"editUrl":"https://github.com/Cyber-Syntax/cyber-syntax.github.io/dev/git/git-how-to.md","tags":[{"inline":true,"label":"git","permalink":"/dev/tags/git"}],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Git Fundamentals","tags":["git"]},"sidebar":"defaultSidebar","previous":{"title":"Docusaurus How to\'s","permalink":"/dev/docusaurus/"},"next":{"title":"Git Troubleshoots","permalink":"/dev/git/git-troubleshoots"}}');var o=n(4848),r=n(8453);const s={sidebar_position:1,title:"Git Fundamentals",tags:["git"]},a=void 0,c={},h=[{value:"How to get updates from main repo without losing your commits",id:"how-to-get-updates-from-main-repo-without-losing-your-commits",level:2},{value:"How to keep README, LICENSE",id:"how-to-keep-readme-license",level:2},{value:"How to clone specific branch?",id:"how-to-clone-specific-branch",level:2},{value:"How to update(commit, push, merge) github projects?",id:"how-to-updatecommit-push-merge-github-projects",level:2},{value:"Revert last commit",id:"revert-last-commit",level:2},{value:"How to sync fork via upstream for new commits?",id:"how-to-sync-fork-via-upstream-for-new-commits",level:2},{value:"How solve 2 commit behind or sync to branch with main after main get updated from PR?",id:"how-solve-2-commit-behind-or-sync-to-branch-with-main-after-main-get-updated-from-pr",level:2},{value:"How to sync and solve commit behind",id:"how-to-sync-and-solve-commit-behind",level:2},{value:"How to revert back without commit?",id:"how-to-revert-back-without-commit",level:2},{value:"How to solve 169 commit ahead from upstream?",id:"how-to-solve-169-commit-ahead-from-upstream",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"how-to-get-updates-from-main-repo-without-losing-your-commits",children:"How to get updates from main repo without losing your commits"}),"\n",(0,o.jsxs)(t.p,{children:["GitHub Copilot: If you want to get the latest commit from the original repository while keeping your changes, you can use ",(0,o.jsx)(t.code,{children:"git pull"}),"\u200b with the ",(0,o.jsx)(t.code,{children:"--rebase"}),"\u200b option. Here are the steps:"]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"First, make sure you are on the branch where you want to apply the updates:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-git",children:"git checkout <your_branch>\ngit fetch upstream\ngit rebase upstream/master\ngit diff origin/<your_branch>\n# resolve conflict\ngit add <file_with_resolved_conflict\ngit rebase --continue\ngit push origin <your_branch> --force\n"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-keep-readme-license",children:"How to keep README, LICENSE"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"[!INFO] files from deleted when merging new branch to main."}),"\n"]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["First, switch to the branch that you want to merge into ",(0,o.jsx)(t.code,{children:"main"}),"\u200b:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"git checkout <branch-name>\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Then, use the ",(0,o.jsx)(t.code,{children:"checkout"}),"\u200b command to get the ",(0,o.jsx)(t.code,{children:"README"}),"\u200b and ",(0,o.jsx)(t.code,{children:"LICENSE"}),"\u200b files from ",(0,o.jsx)(t.code,{children:"main"}),"\u200b:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"This add README and LICENSE files to your bare-repo that you want to merge into main."}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"git checkout main -- README LICENSE\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"If there are any conflicts, resolve them. Then, commit the changes:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"git commit -am 'Merged branch and kept README and LICENSE files'\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Finally, switch back to the ",(0,o.jsx)(t.code,{children:"main"}),"\u200b branch and merge the other branch:\n",(0,o.jsx)(t.code,{children:"bash git checkout main git merge <branch-name> "}),"\nThis way, the ",(0,o.jsx)(t.code,{children:"README"}),"\u200b and ",(0,o.jsx)(t.code,{children:"LICENSE"}),"\u200b files from ",(0,o.jsx)(t.code,{children:"main"}),"\u200b will be kept even after merging the other branch ",(0,o.jsx)(t.a,{href:"https://stackoverflow.com/questions/449541/how-can-i-selectively-merge-or-pick-changes-from-another-branch-in-git",children:"Source 0"}),", ",(0,o.jsx)(t.a,{href:"https://pipinghot.dev/tutorial/merge-specific-files-from-git-branch/",children:"Source 1"}),", ",(0,o.jsx)(t.a,{href:"https://jasonrudolph.com/blog/2009/02/25/git-tip-how-to-merge-specific-files-from-another-branch/",children:"Source 3"}),".\nAnother way to handle this situation is to use Git attributes. You can define a merge driver that always favors the current version of a file, and then use this driver for the files that you want to preserve. Here's how you can do it:"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Define a merge driver that always favors the current version of a file:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"git git-bare --global merge.ours.driver true\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Add a ",(0,o.jsx)(t.code,{children:".gitattributes"}),"\u200b file that tells Git to use the ",(0,o.jsx)(t.code,{children:"ours"}),"\u200b driver for the ",(0,o.jsx)(t.code,{children:"README"}),"\u200b and ",(0,o.jsx)(t.code,{children:"LICENSE"}),"\u200b files:\n",(0,o.jsx)(t.code,{children:"bash echo 'README merge=ours' >> .gitattributes echo 'LICENSE merge=ours' >> .gitattributes git add .gitattributes git commit -m 'chore: Preserve README and LICENSE files during merges' "}),"\nThis will tell Git to use the ",(0,o.jsx)(t.code,{children:"ours"}),"\u200b driver (which always favors the current version of a file) when merging the ",(0,o.jsx)(t.code,{children:"README"}),"\u200b and ",(0,o.jsx)(t.code,{children:"LICENSE"}),"\u200b files ",(0,o.jsx)(t.a,{href:"https://medium.com/@porteneuve/how-to-make-git-preserve-specific-files-while-merging-18c92343826b",children:"Source 2"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"how-to-clone-specific-branch",children:"How to clone specific branch?"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"git clone -b bare-repo <url>\n"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-updatecommit-push-merge-github-projects",children:"How to update(commit, push, merge) github projects?"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"# Update dev or enhancement branch\ngit status #to see modifications\ngit commit -am 'updated <file_name>'\ngit push origin <branch_name>(e.g enhancement or dev)\n\n# Merge changes to main\ngit checkout main\ngit merge enhancement\ngit push origin main\n"})}),"\n",(0,o.jsx)(t.h2,{id:"revert-last-commit",children:"Revert last commit"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-git",children:"git revert HEAD\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-git",children:" git revert --no-commit da65336                                                                                                                                         \u2500\u256f\n\n ~/Documents/repository/super-productivity on master revert +1\n git commit\n"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-sync-fork-via-upstream-for-new-commits",children:"How to sync fork via upstream for new commits?"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["Source: ",(0,o.jsx)(t.a,{href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork",children:"github"})]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"git checkout master\n# Get commits\ngit fetch upstream\n# Rebase local branch to insert last commits from fetched upstream\ngit rebase upstream/master\n# Push to your fork\ngit push origin master\n"})}),"\n",(0,o.jsx)(t.h2,{id:"how-solve-2-commit-behind-or-sync-to-branch-with-main-after-main-get-updated-from-pr",children:"How solve 2 commit behind or sync to branch with main after main get updated from PR?"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"git checkout main\ngit fetch origin main\ngit checkout feat/extract\ngit rebase origin/main\n"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-sync-and-solve-commit-behind",children:"How to sync and solve commit behind"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"[!INFO] how to fix 3 commit behind, 9 commit ahead.\nHow to PR your commits to repo when your branch behind from some commits without losing your commits?"}),"\n"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Fetch updates to local from upstream, push updates to origin forked master branch, Rebase master to branch you want to add new updates from master and push force your branch"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"# sync upstream master and push new commits to your fork\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit push origin master\n\n# get latest updates from master and add your branch\ngit rebase master\ngit push origin turkish-update --force\n"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-revert-back-without-commit",children:"How to revert back without commit?"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"[!INFO] Bununla commit hi\xe7 bir \u015fekilde g\xf6r\xfcnmez ve eklenen commit tamamen yok olur. Dikkatli ol.\nHow to undo commits, revert back without commit to github like delete commit?"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"# son commit resetle\ngit reset --hard HEAD~1\n# OUTPUT: HEAD is now at b8492fdd3 Fix SCHEDULE string and add new strings\n# push to your branch with force to not deal with conflict errors\ngit push origin turkish-fix --force\n"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-solve-169-commit-ahead-from-upstream",children:"How to solve 169 commit ahead from upstream?"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["This error going to show something like this ",(0,o.jsx)(t.code,{children:"\uf313 \uf07c ~/Doc/r/super-productivity on \uf1d3 @59f0afad rebase-i 6/164 ~1 "}),". This is represent 164 commit conflict and git want it user to solve it."]}),"\n",(0,o.jsxs)(t.li,{children:["Abort this if your commit not necessary ",(0,o.jsx)(t.code,{children:"git rebase --abort"})," and reset git and push changes to your forked master branch via force."]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"git reset --hard upstream/master\n# Then it's going to show 169 commits is going to unstaged or revert via arrow down:\n#\u2500 \uf313 \uf07c ~/Doc/r/super-productivity on \uf113 \uf126 master \u21e3169\n# After that force changes to fork.\ngit push origin master --force\n"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Change the current working directory to your local project."}),"\n",(0,o.jsxs)(t.li,{children:["Fetch the branches and their respective commits from the upstream repository. Commits to ",(0,o.jsx)(t.code,{children:"BRANCHNAME"}),"\u200b\u200b will be stored in the local branch ",(0,o.jsx)(t.code,{children:"upstream/BRANCHNAME"}),"\u200b\u200b.","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"$ git fetch upstream\n> remote: Counting objects: 75, done.\n> remote: Compressing objects: 100% (53/53), done.\n> remote: Total 62 (delta 27), reused 44 (delta 9)\n> Unpacking objects: 100% (62/62), done.\n> From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY\n>  * [new branch]      main     -> upstream/main\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["Check out your fork's local default branch - in this case, we use ",(0,o.jsx)(t.code,{children:"main"}),"\u200b\u200b. It can be ",(0,o.jsx)(t.code,{children:"master"}),"\u200b\u200b too","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"$ git checkout main\n> Switched to branch 'main'\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["Merge the changes from the upstream default branch - in this case, ",(0,o.jsx)(t.code,{children:"upstream/main"}),"\u200b\u200b - into your local default branch. This brings your fork's default branch into sync with the upstream repository, without losing your local changes.","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"$ git merge upstream/main\n> Updating a422352..5fdff0f\n> Fast-forward\n>  README                    |    9 -------\n>  README.md                 |    7 ++++++\n>  2 files changed, 7 insertions(+), 9 deletions(-)\n>  delete mode 100644 README\n>  create mode 100644 README.md\n"})}),"\n","If your local branch didn't have any unique commits, Git will perform a fast-forward. For more information, see ",(0,o.jsx)(t.a,{href:"https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging",children:"Basic Branching and Merging"})," in the Git documentation.","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"$ git merge upstream/main\n> Updating 34e91da..16c56ad\n> Fast-forward\n>  README.md                 |    5 +++--\n>  1 file changed, 3 insertions(+), 2 deletions(-)\n"})}),"\n",'If your local branch had unique commits, you may need to resolve conflicts. For more information, see "',(0,o.jsx)(t.a,{href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts",children:"Addressing merge conflicts"}),'."']}),"\n",(0,o.jsxs)(t.li,{children:["Also if master has commit, you need to push to changes to your fork master","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-git",children:"git push origin master\n"})}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(6540);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);